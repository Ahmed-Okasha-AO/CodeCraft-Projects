import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin, urlparse
import threading

class VulnerabilityScanner:
    def __init__(self, url):
        self.target_url = url
        self.session = requests.Session()
        self.visited_links = set()  # To avoid revisiting links
        self.forms = []
        self.lock = threading.Lock()  # For thread-safe operations
    
    def get_page(self, url):
        try:
            response = self.session.get(url)
            return response.text
        except requests.RequestException as e:
            print(f"Error accessing {url}: {e}")
            return None

    def extract_forms(self, page):
        soup = BeautifulSoup(page, "html.parser")
        forms = soup.find_all("form")
        return forms

    def extract_links(self, page):
        soup = BeautifulSoup(page, "html.parser")
        links = []
        for link in soup.find_all("a"):
            href = link.get("href")
            if href and urlparse(href).netloc == urlparse(self.target_url).netloc:
                full_url = urljoin(self.target_url, href)
                if full_url not in self.visited_links:
                    links.append(full_url)
        return links

    def crawl(self, url):
        if url in self.visited_links:
            return
        
        with self.lock:
            self.visited_links.add(url)
        
        page = self.get_page(url)
        if page:
            print(f"Crawling: {url}")
            forms = self.extract_forms(page)
            if forms:
                with self.lock:
                    self.forms.extend(forms)
            links = self.extract_links(page)
            for link in links:
                threading.Thread(target=self.crawl, args=(link,)).start()

    def detect_sql_injection(self):
        print("\n" + "="*50)
        print("[+] SQL Injection Scan:")
        print("="*50)
        sqli_payloads = ["' OR '1'='1", "' OR 'a'='a", "' OR 1=1 --", "'; DROP TABLE users --"]
        
        for form in self.forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            form_url = urljoin(self.target_url, action)
            inputs = form.find_all("input")
            data = {}
            
            for i in inputs:
                input_name = i.get("name")
                input_type = i.get("type", "text")
                if input_type == "text":
                    data[input_name] = "' OR '1'='1"  # SQL Injection attempt
            
            for payload in sqli_payloads:
                print(f"\nTesting SQL Injection with payload: {payload}")
                if method == "post":
                    response = self.session.post(form_url, data=data)
                else:
                    response = self.session.get(form_url, params=data)
                
                if "sql" in response.text.lower() or "database" in response.text.lower():
                    print(f"[!] Vulnerability Found: SQL Injection")
                    print(f"    Payload Used: {payload}")
                    print(f"    Vulnerable URL: {form_url}")
                else:
                    print(f"No vulnerability detected for: {payload}")
    
    def detect_xss(self):
        print("\n" + "="*50)
        print("[+] XSS Scan:")
        print("="*50)
        xss_payload = "<script>alert('XSS')</script>"
        
        for form in self.forms:
            action = form.get("action")
            method = form.get("method", "get").lower()
            form_url = urljoin(self.target_url, action)
            inputs = form.find_all("input")
            data = {}
            
            for i in inputs:
                input_name = i.get("name")
                input_type = i.get("type", "text")
                if input_type == "text":
                    data[input_name] = xss_payload  # XSS Injection attempt
            
            print(f"\nTesting XSS on: {form_url}")
            if method == "post":
                response = self.session.post(form_url, data=data)
            else:
                response = self.session.get(form_url, params=data)
            
            if xss_payload in response.text:
                print(f"[!] Vulnerability Found: XSS (Cross-Site Scripting)")
                print(f"    Payload Used: {xss_payload}")
                print(f"    Vulnerable URL: {form_url}")
            else:
                print(f"No vulnerability detected for XSS on: {form_url}")
    
    def detect_csrf(self):
        print("\n" + "="*50)
        print("[+] CSRF Scan:")
        print("="*50)
        for form in self.forms:
            csrf_token = form.find("input", {"name": "csrf_token"})
            if not csrf_token:
                action = form.get("action")
                form_url = urljoin(self.target_url, action)
                print(f"[!] Vulnerability Found: CSRF (Missing Anti-CSRF Token)")
                print(f"    Vulnerable URL: {form_url}")
            else:
                print(f"CSRF protection detected on: {form_url}")

    def run(self):
        print(f"\nStarting scan on: {self.target_url}")
        self.crawl(self.target_url)
        
        # Wait for crawling to finish
        while threading.active_count() > 1:
            pass
        
        # Scan for vulnerabilities after crawling
        self.detect_sql_injection()
        self.detect_xss()
        self.detect_csrf()

# Example usage with command-line interface (CLI)
if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Vulnerability Scanner")
    parser.add_argument("url", help="The URL of the website to scan")
    parser.add_argument("--scan", choices=["all", "sqli", "xss", "csrf"], default="all", help="Type of scan to perform")
    
    args = parser.parse_args()
    scanner = VulnerabilityScanner(args.url)

    scanner.run()
